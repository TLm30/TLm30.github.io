<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>My New Hugo Site</title>
    <link>http://example.org/</link>
    <description>Recent content on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 05 Nov 2021 15:10:10 +0800</lastBuildDate>
    
	<atom:link href="http://example.org/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>6.824 实验一</title>
      <link>http://example.org/posts/lab1/</link>
      <pubDate>Fri, 05 Nov 2021 15:10:10 +0800</pubDate>
      
      <guid>http://example.org/posts/lab1/</guid>
      <description>Lab1 Map Reduce 要求  一个协调者进程，多个工作进程 通信使用RPC 当一个工作进程超过１０秒还没有完成任务，协调者可以将该任务分配给其他进程  规则  map阶段应该将key分到n个buckets中 worker的实现应该将输出保存在文件mr-out-X中 一个mr-out-X文件应该该找GO的格式分行 coordinator.go应该实现Done()方法 当一个任务完成时，worker进程应该退出，一个简单的实现时使用call()的返回值。取决于你的实现，coordinator应该发送一个请退出的任务给其他worker  提示  worker先发送一个RPC请求coordinator一个任务，然后coordinator返回一个还没开始的任务的文件名，woker读取文件，执行map  过程 coordinator：
 读取所有的文件 监听消息 选择一个文件发送 所有任务完成  worker：
 发送消息 执行文件 退出  详细设计 coordinator:
维护三个列表
 未完成任务列表 进行中任务列表 已完成任务列表  启动时，先初始化未完成任务列表，收到请求时，从未完成任务列表中挑选一个，从列表中移除，然后加入到进行中任务列表，将该任务发送给worker。收到已完成请求后，从进行中任务列表中移除，加入到已完成任务列表。
map阶段，为了使所有key相同的字符串能够写在同一个文件中，需要使用ihash函数对key进行映射。这里定义一个map，其中key是文件名，value是一个数组，数组中的元素是要写入文件的数据。然后以key为文件名，进行写入。其中key的生成规则为mr-X-Y，X是map的任务编号，由coordinator返回，Y是reduce的任务名，由ihash函数生成的数并对reducer数量取余得到，
reduce阶段，遍历所有的中间文件，处理中间文件名和自己编号相同的文件。</description>
    </item>
    
    <item>
      <title>First Post</title>
      <link>http://example.org/posts/first-post/</link>
      <pubDate>Fri, 05 Nov 2021 15:10:10 +0800</pubDate>
      
      <guid>http://example.org/posts/first-post/</guid>
      <description>Hello,World  如果是讲一个体系或生态，有大量琐碎且关联的知识点，比如计算机网络或者组成，那么思维导图最合适； 如果是深入讲一个知识专题，比如 Open API 或 Java 8 特性，只要有个大致印象之后当手册用； 如果是技术史或者形而上的，比如 Unix 编程艺术之类的，那就挑中意的句子画个线； 如果是经典大部头，鲸书或 CSAPP 之类的，重复不断地看，常看常新，倒也没需要做什么笔记。
 </description>
    </item>
    
    <item>
      <title>Netty总结</title>
      <link>http://example.org/posts/netty/</link>
      <pubDate>Fri, 05 Nov 2021 15:10:10 +0800</pubDate>
      
      <guid>http://example.org/posts/netty/</guid>
      <description>netty 组件 bytebuf相关 用于存储字节的数据结构
 readIndex: writeIndex  channel相关  channel: 对socket的封装 channelhandler: 实际业务处理代码  channelInBoundHandler: 处理入站请求 channelOutBoundHanler：处理出战请求   channelpipline: 可以将channelhandler注册到Pipline中，以流水线的方式进行处理 channelhandlercontext: 未知  eventloop相关 </description>
    </item>
    
    <item>
      <title>《转》学会了什么让你突飞猛进</title>
      <link>http://example.org/posts/%E5%AD%A6%E4%BC%9A%E4%BA%86%E4%BB%80%E4%B9%88%E8%AE%A9%E4%BD%A0%E7%AA%81%E9%A3%9E%E7%8C%9B%E8%BF%9B/</link>
      <pubDate>Fri, 05 Nov 2021 15:10:10 +0800</pubDate>
      
      <guid>http://example.org/posts/%E5%AD%A6%E4%BC%9A%E4%BA%86%E4%BB%80%E4%B9%88%E8%AE%A9%E4%BD%A0%E7%AA%81%E9%A3%9E%E7%8C%9B%E8%BF%9B/</guid>
      <description>《转》学会了什么让你突飞猛进 做程序员也 4 年多了，聊聊我这些年的感悟吧。 首先这个问题是掌握了某些概念或技术使自己提升突飞猛进，我觉得这个概念和技术不一定局限于编程概念技术，而是更广阔的，比如说职场技巧、方向等等，因为很多时候”道“方面的领悟比”术“方面的领悟更重要。
 技术和晋升是两码事 个人看法：这一条更适用于大公司 还记得刚毕业的时候，傻傻的我认为只需要写好代码提升技术就行了，Leader 自然会给我晋升。现在看来这种想法简直是大错特错，因为技术和晋升是两码事。  技术好是个很微观的事情，它可以体现在每一行代码中，也可以体现在每一个方法的精巧设计中，但是晋升这个事情是你向 Leader 和公司去兜售劳动成果的结果。
比如说如果你一直在做杂活，虽然在杂货中用了很新潮的技术、很精巧的设计，但是这些杂活可能无法体现出价值，无法包装成一个可以向 Leader 和公司兜售的成果，这样肯定是无法晋升的。
如果你想晋升，那么在提升技术的同时，需要思考哪些事情和成果可以支撑你晋升，那么在平时做事的时候尽量往这些事情上去靠近。
所以，晋升和技术，它们之间有关系，但本质上还是两码事。
程序员终究是在做产品 不知道大家对于程序员的定位是什么，以我现在的思考来说，程序员就是做产品的，这个产品又分为两类，一类是技术产品，一类是商业产品。  比如说 Vue ，这就是一个很牛的技术产品，它服务好了广大的前端程序员，它产生了很大价值，那它的作者尤雨溪就很厉害。
比如说某些城市的摇号小程序，就解决了一件事情，就是可以在微信上更好的查看楼盘、摇号、看摇号进度等等，它把这件事情做好了，并且做成了一个产品，那就很厉害，并且在这件事情上还赚的盆满钵满，创造了很大的商业价值。
所以不管职位是什么，细分方向是什么，究其本质，程序员还是做产品的。
重点学和工作相关的技术 这个是血泪的教训，刚毕业的时候学了一堆和工作不沾边的技术，学了没地方实践只能学个皮毛，而且时间长了就忘了，整个人还焦虑的不行。  以我现在的经验来看，学技术优先和重点学习工作相关的，越相关越好，因为这样子你学的东西可以立马用起来，编程是一门实践科学，用的越多越能学的深刻，并且这样子还能有一个正向循环，不停的有正反馈，更能促进技术进步。
以上就是我的一点思考，这里面的观点也许随着工作年限、遇到人和事的增加而改变，但是此时此刻我的想法就是如此，希望对 ta 人有用。
  学+积累 学是必须的。而且要完善整理出来。 积累到一定程度，横向对比的次数就多了，点就会连成片，很多抽象的思想自然就出现了。思想，也需要整理。
  方向，价值 你关注的东西，随着时间会成就不一样的东西。但，你未必是你想要的。 知识分类一种方式。势、道、法、术、器
  举个例子，linux ，程序员最爱，各种操作上的折腾。那么这些折腾有市场价值没？还是只是自己玩的很开心。如果是后者，那么可能会有种毫无卵用的感觉。如果单纯去研究理论体系呢？
比如，你的朋友每天回家都是刷剧，而你每天回家都是各种研究稀奇古怪的东西，你很开心，但是几年之后，你发现你朋友竟然职位比你还吊。而你，貌似怎么感觉有点心累。可见，做了很多无用功。
长远来看，可能对你个人的其他方向有积累，但是，盲目的瞎搞，可能会使人失望，个人理性取舍最重要。
《大公司晋升秘籍》
 学习开源新框架 在项目中使用开源新框架 发现问题，总结问题 在新框架的基础上包装、整合，自己出一套符合公司业务的框架 宣扬开源新框架的问题 推广自己的框架（这一步最难） 晋升 回到 1 ，开始「另一个」新框架。 这就是前端在大公司的生存之道，用别人的框架是没法让自己晋升哒。  《工作中需要的软技能》
别说算法导论了，当你工作几年就会明白，，以下几个任何一个都可以超过 90%程序员：
 把事情想明白，说清楚，跟别人商量好 写代码，注意边界条件和编码规范，写单测，基本做到无 bug 提测 工作中做好计划和进度跟踪，沟通和汇报，不把问题遗留到变成事故 思考和分析，如何优化目前的工作流程，引入工具和方法，提升生产效率 把自己工作中用到的技术用熟，搞清楚原理，优点短处，适用场景 不断接触新技术思想和工具，完善自身知识体系结构 深入学习至少一个常用开源项目，源码层面系统掌握这项技术 持续坚持学习和技术内容输出，每个星期产出 2 篇原创技术文章  </description>
    </item>
    
    <item>
      <title>读《李诞脱口秀工作手册》有感</title>
      <link>http://example.org/posts/%E8%84%B1%E5%8F%A3%E7%A7%80%E5%B7%A5%E4%BD%9C%E6%89%8B%E5%86%8C%E8%AF%BB%E5%90%8E%E6%84%9F/</link>
      <pubDate>Fri, 05 Nov 2021 15:10:10 +0800</pubDate>
      
      <guid>http://example.org/posts/%E8%84%B1%E5%8F%A3%E7%A7%80%E5%B7%A5%E4%BD%9C%E6%89%8B%E5%86%8C%E8%AF%BB%E5%90%8E%E6%84%9F/</guid>
      <description>读《李诞脱口秀工作手册》有感 今天读完了《李诞脱口秀工作手册》，书中总结的方法还是比较通用的。简单总结几点：
  工作需要专业。书中开始讲了经济学的简单原理： a. 工作的本质是用自己的才能和时间换取金钱。 b. 公司存在的目的是减少交易成本。换句话说，公司是在某一个细分领域能够做的很专业，降低了交易成本才存在的。
  工作和生活的关系。好的工作节奏包含了学习。书中是以说脱口秀为例，讲以比赛代替练习。那以编程为例子，其实也是可 以以赛代练=》参加leetcode比赛，学习一门新的语言、新的框架的方式就是用这门语言做个小东西。工作中用到的框架也包含了对框架的学习。
  请改逐字稿。每个脱口秀稿件都需要进行逐字删改，演出时需要逐字背稿件。其实写好代码也是一样的，以前我写代码常常满足于功能的实现，如何写的优雅、高效，其实也需要多多修改的。这也需要作为写代码的习惯，想起泊涯师兄的CR时给我说的话，他CR时，要看下面几点：可以看《代码整洁之道》
 代码规范  变量命名 代码格式 整体流程是否清晰合理：多写小函数   实现逻辑  变量输入检查      大量的练习：每天先写几个段子再看手机。每天坚持刷题，坚持写文章，写总结，其实是有帮助的，每天大概也就半小时。重在坚持。
  成就更好的自己。讲脱口秀的目的不是为了这一场特别炸，而是为了成为更强的脱口秀演员，所谓特别炸和成名获利，都只是优秀的脱口秀演员的附属品。同样的，写博客写代码做开源的目的不应该是为了更大的impact，目的应该是为了解决已有的某个问题，如果解决地非常漂亮，有价值，有意义，自然就会有impact
  学会出售自己的想法，学会说服别人听从自己的想法。说服的出发点一定是要对其有利的。具体如何做呢？
  做足准备。以说服引进新的技术为例，要讲明白现在系统的痛点在哪里，业内是如何解决的，该技术的适用场景，优点，缺点以及引入成本
  不要给别人拒绝的机会，给选择。
 一般来说给三个选择，这是营销里很基本的知识，不要问，“那这套房您买不买呢？”而是该问，“那这两套房您看中了哪个呢？”还有更流行的理论，永远给对方高中低三个选项，贵的太贵，便宜的不想要，目的就是让对方选择那个你早就计划卖掉的中间项。永远设计好陪跑方案。我不知道你们看没看过营销之类的书，这种书看多了你会觉得很多都是玄学，包括上面这个。但我自己使用过程中，还是觉得挺有用。至少这对你的要求是非常实用的：做足准备，做足不止一个备选。你希望让嘉宾说什么，就直接给他梗，不止一个梗。让他去挑，让他去思考“说哪个”，而不是“说不说”
     有时觉得创新很难，其实创新都是从已有产品和技术之上，做的一点点的改进。
  </description>
    </item>
    
  </channel>
</rss>